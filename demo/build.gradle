apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdk rootProject.ext.compileSdkVersion
    
    defaultConfig {
        applicationId "com.leovp.demo"
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode 13
        versionName "1.3"
        multiDexEnabled true

        ndk {
            // abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
            abiFilters "arm64-v8a"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'

            v1SigningEnabled true
            v2SigningEnabled true
        }

        release {
            storeFile file(System.getenv("KEYSTORE") ?: "../debug.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD") ?: 'android'
            keyAlias System.getenv("KEY_ALIAS") ?: 'androiddebugkey'
            keyPassword System.getenv("KEY_PASSWORD") ?: 'android'

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'default'

    productFlavors {
        develop {
            dimension = 'default'
        }
    }

    compileOptions {
        sourceCompatibility "$rootProject.ext.java_version"
        targetCompatibility "$rootProject.ext.java_version"
    }

    kotlinOptions {
        jvmTarget = "$rootProject.ext.java_version"
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
    packagingOptions {
        jniLibs {
            pickFirsts += ['lib/x86/libstlport_shared.so',
                           'lib/x86_64/libstlport_shared.so',
                           'lib/armeabi/libstlport_shared.so',
                           'lib/armeabi-v7a/libstlport_shared.so',
                           'lib/x86/libc++_shared.so',
                           'lib/x86_64/libc++_shared.so',
                           'lib/armeabi/libc++_shared.so',
                           'lib/armeabi-v7a/libc++_shared.so',
                           'lib/armeabi-v7a/libavutil.so',
                           'lib/armeabi-v7a/libavcodec.so',
                           'lib/armeabi-v7a/libadpcm-ima-qt.so',
                           'lib/armeabi-v7a/libc++_shared.so',
                           'lib/arm64-v8a/libavutil.so',
                           'lib/armeabi-v7a/libjpeg.so',
                           'lib/armeabi-v7a/libturbojpeg.so',
                           'lib/arm64-v8a/libjpeg.so',
                           'lib/arm64-v8a/libturbojpeg.so',
                           'lib/arm64-v8a/libavcodec.so',
                           'lib/arm64-v8a/libadpcm-ima-qt.so',
                           'lib/arm64-v8a/libc++_shared.so',
            ]
        }
        resources {
            excludes += ['META-INF/atomicfu.kotlin_module']
            pickFirsts += ['META-INF/NOTICE',
                           'META-INF/NOTICE.md',
                           'META-INF/DEPENDENCIES',
                           'META-INF/DEPENDENCIES.md',
                           'META-INF/LICENSE',
                           'META-INF/LICENSE.md',
                           'META-INF/LICENSE.txt',
                           'META-INF/native-image/linux-x86/jnijavacpp/jni-config.json',
                           'META-INF/native-image/linux-x86/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/linux-x86_64/jnijavacpp/jni-config.json',
                           'META-INF/native-image/linux-x86_64/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/linux-ppc64le/jnijavacpp/jni-config.json',
                           'META-INF/native-image/linux-ppc64le/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/linux-arm64/jnijavacpp/jni-config.json',
                           'META-INF/native-image/linux-arm64/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/linux-armhf/jnijavacpp/jni-config.json',
                           'META-INF/native-image/linux-armhf/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/android-arm/jnijavacpp/jni-config.json',
                           'META-INF/native-image/android-arm/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/android-arm64/jnijavacpp/jni-config.json',
                           'META-INF/native-image/android-arm64/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/android-x86/jnijavacpp/jni-config.json',
                           'META-INF/native-image/android-x86/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/android-x86_64/jnijavacpp/jni-config.json',
                           'META-INF/native-image/android-x86_64/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/macosx-x86_64/jnijavacpp/jni-config.json',
                           'META-INF/native-image/macosx-x86_64/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/windows-x86/jnijavacpp/jni-config.json',
                           'META-INF/native-image/windows-x86/jnijavacpp/reflect-config.json',
                           'META-INF/native-image/windows-x86_64/jnijavacpp/jni-config.json',
                           'META-INF/native-image/windows-x86_64/jnijavacpp/reflect-config.json',
                           'META-INF/INDEX.LIST',
                           'META-INF/io.netty.versions.properties',
            ]
        }
    }


/*
* DSL element 'dexOptions' is obsolete and should be removed.
* It will be removed in version 8.0 of the Android Gradle plugin.
* Using it has no effect, and the AndroidGradle plugin optimizes dexing automatically.
*/
//    dexOptions {
//        jumboMode true
//        javaMaxHeapSize "4g"
//    }


    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def apkFileName = "LeoDemo-" +
                    "${variant.flavorName}-" +
                    "${buildType.name}-" +
                    "v${variant.versionName}(${variant.versionCode})-" +
                    "${gitVersionTag()}-${gitCommitCount()}" +
                    ".apk"
            outputFileName = apkFileName
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/libs']
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation', 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
    }
    namespace 'com.leovp.demo'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.cardview:cardview:$rootProject.ext.cardviewVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerviewVersion"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swiperefreshlayoutVersion"
    implementation "androidx.core:core-ktx:$rootProject.ext.coreKtxVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintlayoutVersion"
    implementation "androidx.multidex:multidex:$rootProject.ext.multidexVersion"
    implementation "com.google.android.material:material:$rootProject.ext.materialVersion"

    implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navVersion"

    // Lifecycle components
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"

    // ===== Room - Start
    implementation "androidx.room:room-runtime:$roomVersion"
    // For Kotlin use kapt instead of annotationProcessor
    kapt "androidx.room:room-compiler:$roomVersion"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$roomVersion"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$roomVersion"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$roomVersion"
    // ===== Room - End

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "androidx.test:core-ktx:$testCoreKtx"
    androidTestImplementation "androidx.test:runner:$rootProject.ext.androidTestRunnerVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.androidTestExtJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.ext.robolectricVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powermockVersion"
    testImplementation "org.powermock:powermock-core:$rootProject.ext.powermockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.powermockVersion"

    implementation project(':androidbase-sdk')
    implementation project(':log-sdk')
    implementation project(':http-sdk')
    implementation project(':audio-sdk')
    implementation project(':pref-sdk')
    implementation project(':lib-json')
    implementation project(':adpcm-ima-qt-codec-h264-hevc-decoder-sdk')
    implementation project(':basenetty-sdk')
    implementation project(':camera2live-sdk')
    implementation project(':screencapture-sdk')
    implementation project(':drawOnScreen-sdk')
    implementation project(':floatview-sdk')
    implementation project(':circle-progressbar-sdk')
    implementation project(':opengl-sdk')
    implementation project(':camerax-sdk')
    implementation project(':jpeg-sdk')
    implementation project(':lib-network')
    implementation project(':lib-common-android')
    implementation project(':lib-common-kotlin')
    implementation project(':log-sdk')
    implementation project(':lib-bytes')
    implementation project(':lib-image')
    // You can enable either [ffmpeg-sdk] or [ffmpeg-javacpp-sdk]
//    implementation project(':ffmpeg-sdk')
//    implementation project(':ffmpeg-javacpp-sdk')

    // You can enable only one of the following three modules.
//    implementation project(':adpcm-ima-qt-codec-sdk')
//    implementation project(':h264-hevc-decoder-sdk')
//    implementation project(':adpcm-ima-qt-codec-h264-hevc-decoder-sdk')

    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"
    implementation "com.sun.mail:android-mail:$javaMailVersion"
    implementation "com.sun.mail:android-activation:$javaMailVersion"

    implementation "com.tencent.mars:mars-xlog:$rootProject.ext.marsXlogVersion"
//    implementation "com.tencent:mmkv-static:$mmkvVersion"
    implementation "com.tencent:mmkv:$mmkvVersion"
    implementation "com.afollestad.material-dialogs:input:$materialDialogVersion"
    implementation "org.greenrobot:eventbus:$eventbusVersion"
    implementation "io.karn:notify:$karnNotifyVersion"
    implementation "com.daimajia.androidanimations:library:${viewanimatorVersion}@aar"
    implementation "com.github.getActivity:XXPermissions:$xxPermissionVersion"
    // Koin main features for Android
    implementation "io.insert-koin:koin-android:$rootProject.ext.koinVersion"
    // Java Compatibility
//    implementation "io.insert-koin:koin-android-compat:$rootProject.ext.koinVersion"

    // As of bson4jackson 2.13.0, you need add fasterxml jackson manually.
    implementation "de.undercouch:bson4jackson:$bsonVersion"
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation "com.fasterxml.jackson.core:jackson-core:$fasterxmlVersion"
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation "com.fasterxml.jackson.core:jackson-databind:$fasterxmlVersion"
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    implementation "com.fasterxml.jackson.core:jackson-annotations:$fasterxmlVersion"

    implementation "com.github.tiann:FreeReflection:$freeReflectionVersion"

    // Net - dependencies - Start
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.github.liangjingkanji:Net:$netVersion"
    // 支持自动下拉刷新和缺省页的(可选)
    implementation "com.github.liangjingkanji:BRV:$brvVersion"
    // Net - dependencies - End
}
